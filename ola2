import analizador_sangre as analiz

def mostrar_paciente(examen: dict) -> None:
    """ Muestra en pantalla los resultados de un examen de sangre de un paciente.
    Parametros:
        examen (dict): El examen de sangre del que se van a mostrar los detalles.
    """
    id = examen["id"]
    genero = examen["genero"]
    edad = examen["edad"]
    PPM = examen["PPM"]
    Hb = examen["Hb"]
    CGB = examen["CGB"]
    glicemia = examen["glicemia"]
    LDL = examen["LDL"]
    HDL = examen["HDL"]
    trigliceridos = examen["trigliceridos"]
    CT = examen["CT"]
    CL = examen["CL"]
    CP = examen["CP"]
    tiempo = examen["tiempo"]
    GCH = examen["GCH"]

    print("ID: " + str(id) + " - Género: " + str(genero) + " - Edad: " + str(edad) +
          "\nPPM: " + str(PPM) + " - Hb: " + str(Hb) + " - CGB: " + str(CGB) + " - Glicemia: " + str(glicemia) +
          "\nLDL: " + str(LDL) + " - HDL: " + str(HDL) + "Triglicéridos: " + str(trigliceridos) + " - CT: " + str(CT) +
          "\nCL: " + str(CL) + " - CP: " + str(CP) + " Tiempo: " + str(tiempo) + "GCH: " + str(GCH))


def ejecutar_confirmar_embarazo(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que valida si hay embarazo dependiendo de los niveles de la GCH en el examen de sangre con
    id dado por parámetro
     Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
    El programa debe mostrar al usuario: "Los resultados del examen sugieren que la paciente está embarazada." si el 
    examen lo confirma. De lo contrario, se espera que el mensaje sea: "Los resultados del examen sugieren que la paciente NO está embarazada."
    """
    id = int(input("Ingrese el identificador de la paciente que quiere buscar"))
    analiz.buscar_examen(id,e1,e2,e3,e4)
    examen = dict(input("Resultado examen"))
    if analiz.confirmar_embarazo(examen)==True:
        print("Los resultados del examen sugieren que la paciente está embarazada.")
    if analiz.confirmar_embarazo(examen)==False:
        print("Los resultados del examen sugieren que la paciente NO está embarazada.")
        
    
    

def ejecutar_validar_pulsaciones(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que valida si el paciente tiene taquicardia, bradicardia o normalidad .
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
        Si la respuesta es normalidad, el programa debe mostrar el string: El paciente no presenta ninguna anormalidad en su pulso.
        De lo contrario, debe mostrar el string: El paciente presenta YYYY. Donde YYYY puede ser taquicardia o bradicardia
    """
    id = input("Ingrese el identificador del paciente que quiere buscar")
    #TODO: Completar


def ejecutar_confirmar_anemia(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que valida si el examen de sangre muestra anemia en la sangre dada la hemoglobina en sangre
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
        Si el resultado indica anemia,  el programa debe mostrar el string: El paciente presenta indicaciones de sufrir anemia.
        De lo contrario, debe mostrar el string: El paciente NO presenta indicaciones de sufrir anemia.
    """
    id = input("Ingrese el identificador del paciente que quiere buscar")
    #TODO: Completar


def ejecutar_contar_hipoglicemicos(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que valida cuántos pacientes son hipoglicémicos
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
        El programa debe retornar el string: Hay X pacientes hipoglicémicos. Donde X es la cantidad 
        de pacientes hipoglicémicos en el hospital
    """
    #TODO: Completar


def ejecutar_validar_infecciones(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que valida cuáles exámenes de sangre presentan posibilidad de infecciones dependiendo del conteo de glóbulos
    blancos (CGB)
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
        El programa debe retornar el string: Los siguientes pacientes presentan riesgo de tener infecciones: YYYY. 
        Donde YYYY es el listado de ids de los pacientes, separados por comas, que tienen indicios de infección.
    """
    #TODO: Completar

def ejecutar_calcular_promedio(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que calcula el tiempo promedio de procesamiento para las muestras de sangre
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
        El sistema debe mostrar le string:El tiempo promedio en que las muestras tardan en procesarse es X. 
        Donde X es el tiempo promedio de procesamiento de las muestras
    """
    #TODO: Completar


def ejecutar_actualizar_glicemia(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Dado el id de un examen de sangre, calcular el número de unidades de insulina, del tipo especificado,
    necesarias para corregir los niveles de azúcar en sangre hasta el nivel objetivo dado por parámetro.
    Se debe actualizar el valor de la glicemia en el examen de sangre especificado, añadir la llave
    de unidades_Suministradas con el valor de las unidades de insulina para corregir el azúcar en sangre
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.

    El programa debe mostrar el siguiente String: X unidades de insulina deben ser administradas al paciente.
    Donde X es el número de unidades que deben ser administradas para realizar la corrección. 
    """
    id = input("Ingrese el identificador del paciente que quiere buscar")
    # TODO: Completar


def ejecutar_validar_diabetes(e1: dict, e2: dict, e3: dict, e4: dict) -> None:
    """
    Ejecuta la función que valida si el examen de sangre muestra indices de diabetes de acuerdo a la glicemia en ayunas
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.4
        Si el resultado es normalidad, se debe mostrar el mensaje:El paciente no presenta ninguna anormalidad.
        De lo contrario, debe mostrar un mensaje de la siguiente manera: El paciente presenta X. 
        Donde X puede ser diabetes o prediabetes dependiendo del caso. 
    """
    id = input("Ingrese el identificador del paciente que quiere buscar")
    #TODO: Completar


def ejecutar_evaluar_prioridad(e1: dict, e2: dict, e3: dict, e4: dict) -> dict:
    """
    Ejecuta la función que evalúa qué paciente tiene mayor prioridad para ser atendido
    dado los puntos de riesgo cardiaco del perfil lipídico.
    Parámetros:
        e1 (dict): Diccionario con la información del examen 1.
        e2 (dict): Diccionario con la información del examen 2.
        e3 (dict): Diccionario con la información del examen 3.
        e4 (dict): Diccionario con la información del examen 4.
        El sistema mostrar el string: El paciente con ID X debe ser atendido con prioridad. 
        Donde X es el id del paciente con mayor prioridad en la escala de riesgo.
    """
    #TODO: Completar


def ejecutar_validar_CLL(e1: dict, e2: dict, e3: dict, e4: dict) -> int:
    """
    Valida si el paciente debe ser diagnosticado con CLL dado su conteo de linfocitos, plaquetas y si el resultado del
    examen de frotis.
    :param examen: Diccionario con el examen de sangre a validar
    :param frotis: Resultado del examen del frotis de las células sanguíneas.
    Si el resultado es 1, el programa debe mostrar: Los resultados sugieren que el paciente es positivo para CLL
    Si el resultado es -1, el programa debe mostrar: Se debe realizar una biopsia de médula para confirmar el diagnóstico de CLL
    Si el resultado es 0, el programa debe mostrar: El paciente no presenta indicaciones de CLL
    """
    id = input("Ingrese el identificador del paciente que quiere buscar")
    frotis = bool(
        int(input("Ingresa 1 si el examen de Frotis salió positivo, 0 de lo contrario")))
    #TODO: Completar
    


def iniciar_aplicacion():
    """Inicia la ejecución de la aplicación por consola.
    Esta función primero crea cuatro resultados de exámenes de sangre.
    Luego la función le muestra el menú al usuario y espera a que seleccione una opción.
    Esta operación se repite hasta que el usuario seleccione la opción de salir.
    """
    examen1 = mod.crear_paciente(
        1, "M", 20, 88, 20, 11.5, 280, 89.7, 50, 120.8, 240, 7.9, 150, 25, 0)
    examen2 = mod.crear_paciente(
        2, "F", 30, 90, 9, 10.5, 69, 98.3, 60, 100.9, 225, 9.8, 141, 35, 10)
    examen3 = mod.crear_paciente(
        3, "F", 69, 70, 15, 12.5, 115, 138.6, 40, 150.3, 260, 8.2, 160, 15, 2)
    examen4 = mod.crear_paciente(
        4, "M", 33, 60, 10, 9.9, 65, 102.5, 55, 120.8, 236, 10.6, 167, 43, 0)

    ejecutando = True
    while ejecutando:
        print("\n\nResultado de los exámenes" + ("-"*50))
        print("Examen de Sangre 1")
        mostrar_paciente(examen1)
        print("-"*50)

        print("Examen de Sangre 2")
        mostrar_paciente(examen2)
        print("-"*50)

        print("Examen de Sangre 3")
        mostrar_paciente(examen3)
        print("-"*50)

        print("Examen de Sangre 4")
        mostrar_paciente(examen4)
        print("-"*50)

        ejecutando = mostrar_menu_aplicacion(
            examen1, examen2, examen3, examen4)

        if ejecutando:
            input("Presione cualquier tecla para continuar ... ")


def mostrar_menu_aplicacion(e1: dict, e2: dict, e3: dict, e4: dict) -> bool:
    """Le muestra al usuario las opciones de ejecucion disponibles.
    Parametros:
        e1 (dict): Diccionario que contiene la información del examen 1.
        e2 (dict): Diccionario que contiene la información del examen 2.
        e3 (dict): Diccionario que contiene la información del examen 3.
        e4 (dict): Diccionario que contiene la información del examen 4.
    Retorno:
        Esta función retorna True si el usuario selecciono una opción diferente
        a la opción que le permite salir de la aplicación.
        Esta función retorna False si el usuario selecciono la opción para salir
        de la aplicación.

    """
    print("Menu de opciones")
    print(" 1 - Confirmar embarazo")
    print(" 2 - Validar PPM")
    print(" 3 - Confirmar Anemia")
    print(" 4 - Contar hipoglicémicos")
    print(" 5 - Validar infecciones")
    print(" 6 - Promedio de exámenes")
    print(" 7 - Actualizar Glicemia")
    print(" 8 - Validar diabetes")
    print(" 9 - Evaluar prioridad")
    print(" 10 - Validar CLL")
    print(" 11 - Salir de la aplicación.")

    opcion_elegida = input("Ingrese la opción que desea ejecutar: ").strip()

    continuar_ejecutando = True

    if opcion_elegida == "1":
        ejecutar_confirmar_embarazo(e1, e2, e3, e4)
    elif opcion_elegida == "2":
        ejecutar_validar_pulsaciones(e1, e2, e3, e4)
    elif opcion_elegida == "3":
        ejecutar_confirmar_anemia(e1, e2, e3, e4)
    elif opcion_elegida == "4":
        ejecutar_contar_hipoglicemicos(e1, e2, e3, e4)
    elif opcion_elegida == "5":
        ejecutar_validar_infecciones(e1, e2, e3, e4)
    elif opcion_elegida == "6":
        ejecutar_calcular_promedio(e1, e2, e3, e4)
    elif opcion_elegida == "7":
        ejecutar_actualizar_glicemia(e1, e2, e3, e4)
    elif opcion_elegida == "8":
        ejecutar_validar_diabetes(e1, e2, e3, e4)
    elif opcion_elegida == "9":
        ejecutar_evaluar_prioridad(e1, e2, e3, e4)
    elif opcion_elegida == "10":
        ejecutar_validar_CLL(e1, e2, e3, e4)
    elif opcion_elegida == "11":
        continuar_ejecutando = False
    else:
        print("La opcion " + opcion_elegida + " no es una opción valida.")
    return continuar_ejecutando


iniciar_aplicacion()
